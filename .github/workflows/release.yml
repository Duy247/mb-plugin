name: Build and Release Plugin

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for creating releases
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: gradle
      
      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew
      
      - name: Build plugin
        run: ./gradlew buildPlugin
      
      # Extract the current version from the build
      - name: Extract current version
        id: extract_version
        run: |
          # Extract version from build.gradle.kts or another reliable source
          VERSION=$(grep -o 'version = "[^"]*"' build.gradle.kts | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          # Get short commit hash for reference
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT
      
      # Find the distribution ZIP file
      - name: Find distribution ZIP
        id: find_zip
        run: |
          ZIP_FILE=$(find ./build/distributions/ -name "*.zip" | head -n 1)
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_OUTPUT
          echo "ZIP_NAME=$(basename $ZIP_FILE)" >> $GITHUB_OUTPUT
      
      # Upload as GitHub Actions artifact (faster access during development)
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-zip
          path: ${{ steps.find_zip.outputs.ZIP_FILE }}
          retention-days: 7
      
      # Handle the "latest" tag and release
      - name: Create/Update latest release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const fs = require('fs');
            
            // Delete 'latest' tag if it exists
            try {
              await github.rest.git.deleteRef({
                owner,
                repo,
                ref: 'tags/latest'
              });
              console.log("Deleted existing 'latest' tag");
            } catch (error) {
              console.log("No existing 'latest' tag found or could not delete it");
            }
            
            // Create new 'latest' tag pointing to current commit
            const currentCommitSha = process.env.GITHUB_SHA;
            await github.rest.git.createRef({
              owner,
              repo,
              ref: 'refs/tags/latest',
              sha: currentCommitSha
            });
            console.log("Created new 'latest' tag pointing to", currentCommitSha);
            
            // Delete existing 'latest' release if it exists
            try {
              const latestRelease = await github.rest.repos.getReleaseByTag({
                owner,
                repo,
                tag: 'latest'
              });
              
              await github.rest.repos.deleteRelease({
                owner,
                repo,
                release_id: latestRelease.data.id
              });
              console.log("Deleted existing 'latest' release");
            } catch (error) {
              console.log("No existing 'latest' release found or could not delete it");
            }
            
            // Create a new release for the 'latest' tag
            const version = process.env.VERSION;
            const commitHash = process.env.COMMIT_HASH;
            const release = await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: 'latest',
              name: `Latest Build (${version})`,
              body: `This is the latest build from commit ${commitHash}.\nBuilt on ${new Date().toISOString().split('T')[0]}`,
              draft: false,
              prerelease: false,
              make_latest: 'true'
            });
            console.log("Created new 'latest' release");
            
            // Upload the ZIP file to the release
            const zipPath = process.env.ZIP_FILE;
            const zipName = process.env.ZIP_NAME;
            
            await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id: release.data.id,
              name: zipName,
              data: fs.readFileSync(zipPath)
            });
            console.log("Uploaded ZIP file to 'latest' release");
        env:
          ZIP_FILE: ${{ steps.find_zip.outputs.ZIP_FILE }}
          ZIP_NAME: ${{ steps.find_zip.outputs.ZIP_NAME }}
          VERSION: ${{ steps.extract_version.outputs.VERSION }}
          COMMIT_HASH: ${{ steps.extract_version.outputs.COMMIT_HASH }}