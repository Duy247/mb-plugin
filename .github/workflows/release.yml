name: Build and Release Plugin

on:
  push:
    tags:
      - '*' # Trigger on any tag (not just those starting with v)

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for creating releases
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: gradle
      
      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew
      
      - name: Build plugin
        run: ./gradlew buildPlugin
      
      - name: Get version from tag
        id: get_version
        run: |
          # Strip 'v' prefix if present, otherwise use the tag as is
          if [[ ${GITHUB_REF#refs/tags/} == v* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "RAW_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "RAW_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Find distribution ZIP
        id: find_zip
        run: |
          ZIP_FILE=$(find ./build/distributions/ -name "*.zip" | head -n 1)
          echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_OUTPUT
          echo "ZIP_NAME=$(basename $ZIP_FILE)" >> $GITHUB_OUTPUT
      
      - name: Create Release with original tag
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          files: ${{ steps.find_zip.outputs.ZIP_FILE }}
          draft: false
          prerelease: false
          tag_name: ${{ github.ref_name }}
      
      - name: Update latest tag and create release for "latest"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            
            // Delete 'latest' tag if it exists
            try {
              await github.rest.git.deleteRef({
                owner,
                repo,
                ref: 'tags/latest'
              });
              console.log("Deleted existing 'latest' tag");
            } catch (error) {
              console.log("No existing 'latest' tag found or could not delete it");
            }
            
            // Get SHA of current tag
            const tagRef = await github.rest.git.getRef({
              owner,
              repo,
              ref: `tags/${context.ref.replace('refs/tags/', '')}`
            });
            
            // Create new 'latest' tag pointing to same commit
            await github.rest.git.createRef({
              owner,
              repo,
              ref: 'refs/tags/latest',
              sha: tagRef.data.object.sha
            });
            console.log("Created new 'latest' tag");
            
            // Also create a release for the 'latest' tag
            // Get the release assets
            const zipFile = process.env.ZIP_FILE;
            const version = process.env.VERSION;
            
            // Create a release for the 'latest' tag
            await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: 'latest',
              name: `Latest Release (${version})`,
              body: `This is always the latest release (originally tagged as ${process.env.RAW_TAG})`,
              draft: false,
              prerelease: false,
              make_latest: 'true'
            });
            console.log("Created release for 'latest' tag");
        env:
          ZIP_FILE: ${{ steps.find_zip.outputs.ZIP_FILE }}
          VERSION: ${{ steps.get_version.outputs.VERSION }}
          RAW_TAG: ${{ steps.get_version.outputs.RAW_TAG }}
      
      - name: Upload asset to latest release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const zipPath = process.env.ZIP_FILE;
            const zipName = process.env.ZIP_NAME;
            
            // Get the 'latest' release
            const latestRelease = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag: 'latest'
            });
            
            // Upload the ZIP file to the 'latest' release
            await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id: latestRelease.data.id,
              name: zipName,
              data: fs.readFileSync(zipPath)
            });
            console.log("Uploaded ZIP file to 'latest' release");
        env:
          ZIP_FILE: ${{ steps.find_zip.outputs.ZIP_FILE }}
          ZIP_NAME: ${{ steps.find_zip.outputs.ZIP_NAME }}